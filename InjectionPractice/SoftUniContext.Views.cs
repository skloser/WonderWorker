//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(InjectionPractice.SoftUniEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets387f54ca6f1549cc1e13453fb1e61841e1b47ec19bfdb2fd5fd0bc266d93ca26))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets387f54ca6f1549cc1e13453fb1e61841e1b47ec19bfdb2fd5fd0bc266d93ca26 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "387f54ca6f1549cc1e13453fb1e61841e1b47ec19bfdb2fd5fd0bc266d93ca26"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "SoftUniModelStoreContainer.Addresses")
            {
                return GetView0();
            }

            if (extentName == "SoftUniModelStoreContainer.Departments")
            {
                return GetView1();
            }

            if (extentName == "SoftUniModelStoreContainer.Employees")
            {
                return GetView2();
            }

            if (extentName == "SoftUniModelStoreContainer.Projects")
            {
                return GetView3();
            }

            if (extentName == "SoftUniModelStoreContainer.Towns")
            {
                return GetView4();
            }

            if (extentName == "SoftUniModelStoreContainer.WorkHours")
            {
                return GetView5();
            }

            if (extentName == "SoftUniModelStoreContainer.EmployeesProjects")
            {
                return GetView6();
            }

            if (extentName == "SoftUniEntities.Addresses")
            {
                return GetView7();
            }

            if (extentName == "SoftUniEntities.Departments")
            {
                return GetView8();
            }

            if (extentName == "SoftUniEntities.Employees")
            {
                return GetView9();
            }

            if (extentName == "SoftUniEntities.Projects")
            {
                return GetView10();
            }

            if (extentName == "SoftUniEntities.Towns")
            {
                return GetView11();
            }

            if (extentName == "SoftUniEntities.WorkHours")
            {
                return GetView12();
            }

            if (extentName == "SoftUniEntities.EmployeesProjects")
            {
                return GetView13();
            }

            if (extentName == "SoftUniModelStoreContainer.Companies")
            {
                return GetView14();
            }

            if (extentName == "SoftUniModelStoreContainer.Conferences")
            {
                return GetView15();
            }

            if (extentName == "SoftUniEntities.Companies")
            {
                return GetView16();
            }

            if (extentName == "SoftUniEntities.Conferences")
            {
                return GetView17();
            }

            if (extentName == "SoftUniModelStoreContainer.Groups")
            {
                return GetView18();
            }

            if (extentName == "SoftUniModelStoreContainer.Users")
            {
                return GetView19();
            }

            if (extentName == "SoftUniEntities.Groups")
            {
                return GetView20();
            }

            if (extentName == "SoftUniEntities.Users")
            {
                return GetView21();
            }

            if (extentName == "SoftUniModelStoreContainer.sysdiagrams")
            {
                return GetView22();
            }

            if (extentName == "SoftUniEntities.sysdiagrams")
            {
                return GetView23();
            }

            if (extentName == "SoftUniModelStoreContainer.TemMillionQueries")
            {
                return GetView24();
            }

            if (extentName == "SoftUniEntities.TemMillionQueries")
            {
                return GetView25();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Addresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Addresses
        [SoftUniModel.Store.Addresses](T1.Addresses_AddressID, T1.Addresses_AddressText, T1.Addresses_TownID)
    FROM (
        SELECT 
            T.AddressID AS Addresses_AddressID, 
            T.AddressText AS Addresses_AddressText, 
            T.TownID AS Addresses_TownID, 
            True AS _from0
        FROM SoftUniEntities.Addresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [SoftUniModel.Store.Departments](T1.Departments_DepartmentID, T1.Departments_Name, T1.Departments_ManagerID)
    FROM (
        SELECT 
            T.DepartmentID AS Departments_DepartmentID, 
            T.Name AS Departments_Name, 
            T.ManagerID AS Departments_ManagerID, 
            True AS _from0
        FROM SoftUniEntities.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [SoftUniModel.Store.Employees](T1.Employees_EmployeeID, T1.Employees_FirstName, T1.Employees_LastName, T1.Employees_MiddleName, T1.Employees_JobTitle, T1.Employees_DepartmentID, T1.Employees_ManagerID, T1.Employees_HireDate, T1.Employees_Salary, T1.Employees_AddressID, T1.Employees_WorkHoursId)
    FROM (
        SELECT 
            T.EmployeeID AS Employees_EmployeeID, 
            T.FirstName AS Employees_FirstName, 
            T.LastName AS Employees_LastName, 
            T.MiddleName AS Employees_MiddleName, 
            T.JobTitle AS Employees_JobTitle, 
            T.DepartmentID AS Employees_DepartmentID, 
            T.ManagerID AS Employees_ManagerID, 
            T.HireDate AS Employees_HireDate, 
            T.Salary AS Employees_Salary, 
            T.AddressID AS Employees_AddressID, 
            T.WorkHoursId AS Employees_WorkHoursId, 
            True AS _from0
        FROM SoftUniEntities.Employees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Projects
        [SoftUniModel.Store.Projects](T1.Projects_ProjectID, T1.Projects_Name, T1.Projects_Description, T1.Projects_StartDate, T1.Projects_EndDate)
    FROM (
        SELECT 
            T.ProjectID AS Projects_ProjectID, 
            T.Name AS Projects_Name, 
            T.Description AS Projects_Description, 
            T.StartDate AS Projects_StartDate, 
            T.EndDate AS Projects_EndDate, 
            True AS _from0
        FROM SoftUniEntities.Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Towns.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Towns
        [SoftUniModel.Store.Towns](T1.Towns_TownID, T1.Towns_Name)
    FROM (
        SELECT 
            T.TownID AS Towns_TownID, 
            T.Name AS Towns_Name, 
            True AS _from0
        FROM SoftUniEntities.Towns AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.WorkHours.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WorkHours
        [SoftUniModel.Store.WorkHours](T1.WorkHours_WorkHoursId, T1.WorkHours_DateOfAssignment, T1.WorkHours_Task, T1.WorkHours_NumberOfHours, T1.WorkHours_Comments)
    FROM (
        SELECT 
            T.WorkHoursId AS WorkHours_WorkHoursId, 
            T.DateOfAssignment AS WorkHours_DateOfAssignment, 
            T.Task AS WorkHours_Task, 
            T.NumberOfHours AS WorkHours_NumberOfHours, 
            T.Comments AS WorkHours_Comments, 
            True AS _from0
        FROM SoftUniEntities.WorkHours AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.EmployeesProjects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmployeesProjects
        [SoftUniModel.Store.EmployeesProjects](T1.EmployeesProjects_EmployeeID, T1.EmployeesProjects_ProjectID)
    FROM (
        SELECT 
            Key(T.Employees).EmployeeID AS EmployeesProjects_EmployeeID, 
            Key(T.Projects).ProjectID AS EmployeesProjects_ProjectID, 
            True AS _from0
        FROM SoftUniEntities.EmployeesProjects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Addresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Addresses
        [SoftUniModel.Addresses](T1.Addresses_AddressID, T1.Addresses_AddressText, T1.Addresses_TownID)
    FROM (
        SELECT 
            T.AddressID AS Addresses_AddressID, 
            T.AddressText AS Addresses_AddressText, 
            T.TownID AS Addresses_TownID, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Addresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [SoftUniModel.Departments](T1.Departments_DepartmentID, T1.Departments_Name, T1.Departments_ManagerID)
    FROM (
        SELECT 
            T.DepartmentID AS Departments_DepartmentID, 
            T.Name AS Departments_Name, 
            T.ManagerID AS Departments_ManagerID, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [SoftUniModel.Employees](T1.Employees_EmployeeID, T1.Employees_FirstName, T1.Employees_LastName, T1.Employees_MiddleName, T1.Employees_JobTitle, T1.Employees_DepartmentID, T1.Employees_ManagerID, T1.Employees_HireDate, T1.Employees_Salary, T1.Employees_AddressID, T1.Employees_WorkHoursId)
    FROM (
        SELECT 
            T.EmployeeID AS Employees_EmployeeID, 
            T.FirstName AS Employees_FirstName, 
            T.LastName AS Employees_LastName, 
            T.MiddleName AS Employees_MiddleName, 
            T.JobTitle AS Employees_JobTitle, 
            T.DepartmentID AS Employees_DepartmentID, 
            T.ManagerID AS Employees_ManagerID, 
            T.HireDate AS Employees_HireDate, 
            T.Salary AS Employees_Salary, 
            T.AddressID AS Employees_AddressID, 
            T.WorkHoursId AS Employees_WorkHoursId, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Employees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Projects
        [SoftUniModel.Projects](T1.Projects_ProjectID, T1.Projects_Name, T1.Projects_Description, T1.Projects_StartDate, T1.Projects_EndDate)
    FROM (
        SELECT 
            T.ProjectID AS Projects_ProjectID, 
            T.Name AS Projects_Name, 
            T.Description AS Projects_Description, 
            T.StartDate AS Projects_StartDate, 
            T.EndDate AS Projects_EndDate, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Towns.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Towns
        [SoftUniModel.Towns](T1.Towns_TownID, T1.Towns_Name)
    FROM (
        SELECT 
            T.TownID AS Towns_TownID, 
            T.Name AS Towns_Name, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Towns AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.WorkHours.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WorkHours
        [SoftUniModel.WorkHours](T1.WorkHours_WorkHoursId, T1.WorkHours_DateOfAssignment, T1.WorkHours_Task, T1.WorkHours_NumberOfHours, T1.WorkHours_Comments)
    FROM (
        SELECT 
            T.WorkHoursId AS WorkHours_WorkHoursId, 
            T.DateOfAssignment AS WorkHours_DateOfAssignment, 
            T.Task AS WorkHours_Task, 
            T.NumberOfHours AS WorkHours_NumberOfHours, 
            T.Comments AS WorkHours_Comments, 
            True AS _from0
        FROM SoftUniModelStoreContainer.WorkHours AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.EmployeesProjects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmployeesProjects
        [SoftUniModel.EmployeesProjects](T3.EmployeesProjects_Employees, T3.EmployeesProjects_Projects)
    FROM (
        SELECT -- Constructing Employees
            CreateRef(SoftUniEntities.Employees, row(T2.EmployeesProjects_Employees_EmployeeID), [SoftUniModel.Employees]) AS EmployeesProjects_Employees, 
            T2.EmployeesProjects_Projects
        FROM (
            SELECT -- Constructing Projects
                T1.EmployeesProjects_Employees_EmployeeID, 
                CreateRef(SoftUniEntities.Projects, row(T1.EmployeesProjects_Projects_ProjectID), [SoftUniModel.Projects]) AS EmployeesProjects_Projects
            FROM (
                SELECT 
                    T.EmployeeID AS EmployeesProjects_Employees_EmployeeID, 
                    T.ProjectID AS EmployeesProjects_Projects_ProjectID, 
                    True AS _from0
                FROM SoftUniModelStoreContainer.EmployeesProjects AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Companies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Companies
        [SoftUniModel.Store.Companies](T1.Companies_CompanyId, T1.Companies_Name, T1.Companies_EmployeesCount, T1.Companies_FoundedIn)
    FROM (
        SELECT 
            T.CompanyId AS Companies_CompanyId, 
            T.Name AS Companies_Name, 
            T.EmployeesCount AS Companies_EmployeesCount, 
            T.FoundedIn AS Companies_FoundedIn, 
            True AS _from0
        FROM SoftUniEntities.Companies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Conferences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Conferences
        [SoftUniModel.Store.Conferences](T1.Conferences_ConferenceId, T1.Conferences_Name, T1.Conferences_Price, T1.Conferences_FreeSeats, T1.Conferences_Venue, T1.Conferences_CompanyId)
    FROM (
        SELECT 
            T.ConferenceId AS Conferences_ConferenceId, 
            T.Name AS Conferences_Name, 
            T.Price AS Conferences_Price, 
            T.FreeSeats AS Conferences_FreeSeats, 
            T.Venue AS Conferences_Venue, 
            T.CompanyId AS Conferences_CompanyId, 
            True AS _from0
        FROM SoftUniEntities.Conferences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Companies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Companies
        [SoftUniModel.Companies](T1.Companies_CompanyId, T1.Companies_Name, T1.Companies_EmployeesCount, T1.Companies_FoundedIn)
    FROM (
        SELECT 
            T.CompanyId AS Companies_CompanyId, 
            T.Name AS Companies_Name, 
            T.EmployeesCount AS Companies_EmployeesCount, 
            T.FoundedIn AS Companies_FoundedIn, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Companies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Conferences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Conferences
        [SoftUniModel.Conferences](T1.Conferences_ConferenceId, T1.Conferences_Name, T1.Conferences_Price, T1.Conferences_FreeSeats, T1.Conferences_Venue, T1.Conferences_CompanyId)
    FROM (
        SELECT 
            T.ConferenceId AS Conferences_ConferenceId, 
            T.Name AS Conferences_Name, 
            T.Price AS Conferences_Price, 
            T.FreeSeats AS Conferences_FreeSeats, 
            T.Venue AS Conferences_Venue, 
            T.CompanyId AS Conferences_CompanyId, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Conferences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Groups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Groups
        [SoftUniModel.Store.Groups](T1.Groups_GroupId, T1.Groups_Name)
    FROM (
        SELECT 
            T.GroupId AS Groups_GroupId, 
            T.Name AS Groups_Name, 
            True AS _from0
        FROM SoftUniEntities.Groups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [SoftUniModel.Store.Users](T1.Users_UserId, T1.Users_SecretPassword, T1.Users_FullName, T1.Users_LastLoginTime, T1.Users_GroupId)
    FROM (
        SELECT 
            T.UserId AS Users_UserId, 
            T.SecretPassword AS Users_SecretPassword, 
            T.FullName AS Users_FullName, 
            T.LastLoginTime AS Users_LastLoginTime, 
            T.GroupId AS Users_GroupId, 
            True AS _from0
        FROM SoftUniEntities.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Groups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Groups
        [SoftUniModel.Groups](T1.Groups_GroupId, T1.Groups_Name)
    FROM (
        SELECT 
            T.GroupId AS Groups_GroupId, 
            T.Name AS Groups_Name, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Groups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [SoftUniModel.Users](T1.Users_UserId, T1.Users_SecretPassword, T1.Users_FullName, T1.Users_LastLoginTime, T1.Users_GroupId)
    FROM (
        SELECT 
            T.UserId AS Users_UserId, 
            T.SecretPassword AS Users_SecretPassword, 
            T.FullName AS Users_FullName, 
            T.LastLoginTime AS Users_LastLoginTime, 
            T.GroupId AS Users_GroupId, 
            True AS _from0
        FROM SoftUniModelStoreContainer.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [SoftUniModel.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM SoftUniEntities.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [SoftUniModel.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM SoftUniModelStoreContainer.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniModelStoreContainer.TemMillionQueries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TemMillionQueries
        [SoftUniModel.Store.TemMillionQueries](T1.TemMillionQueries_TemMillionQueriesId, T1.TemMillionQueries_DateOfCreation, T1.TemMillionQueries_Comments)
    FROM (
        SELECT 
            T.TemMillionQueriesId AS TemMillionQueries_TemMillionQueriesId, 
            T.DateOfCreation AS TemMillionQueries_DateOfCreation, 
            T.Comments AS TemMillionQueries_Comments, 
            True AS _from0
        FROM SoftUniEntities.TemMillionQueries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SoftUniEntities.TemMillionQueries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TemMillionQueries
        [SoftUniModel.TemMillionQueries](T1.TemMillionQueries_TemMillionQueriesId, T1.TemMillionQueries_DateOfCreation, T1.TemMillionQueries_Comments)
    FROM (
        SELECT 
            T.TemMillionQueriesId AS TemMillionQueries_TemMillionQueriesId, 
            T.DateOfCreation AS TemMillionQueries_DateOfCreation, 
            T.Comments AS TemMillionQueries_Comments, 
            True AS _from0
        FROM SoftUniModelStoreContainer.TemMillionQueries AS T
    ) AS T1");
        }
    }
}
